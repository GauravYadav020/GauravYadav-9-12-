# -*- coding: utf-8 -*-
"""DSCM18L1ACP - Data Classification..ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ld0hNiR-KEPaQ1TR9KHe4wjPSfJM-jtK
"""

1.52101,13.64,4.49,1.10,71.78,0.06,8.75,0.00,0.00,1
1.51761,13.89,3.60,1.36,72.73,0.48,7.83,0.00,0.00,1
1.51618,13.53,3.55,1.54,72.99,0.39,7.78,0.00,0.00,1
1.51766,13.21,3.69,1.29,72.61,0.57,8.22,0.00,0.00,1
1.51742,13.27,3.62,1.24,73.08,0.55,8.07,0.00,0.00,1
...

# check version number

"""Imblearn techniques are the methods by which we can generate a data set that has an equal ratio of classes."""

import imblearn

# load and summarize the dataset

"""Using the Python Counter tool, you can count the key-value pairs in an object, also called a hashtable object.
The Counter holds the data in an unordered collection, just like hashtable objects.
The elements here represent the keys and the count as values.
It allows you to count the items in an iterable list."""

from pandas import read_csv
from collections import Counter
from matplotlib import pyplot
from sklearn.preprocessing import LabelEncoder

# define the dataset location

"""Importing the dataset from the github"""

url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/glass.csv'

# load the csv file as a data frame
df = read_csv(url, header=None)
data = df.values

# split into input and output elements
X, y = data[:, :-1], data[:, -1]

# label encode the target variable
y = LabelEncoder().fit_transform(y)

# summarize distribution
counter = Counter(y)
for k,v in counter.items():
	per = v / len(y) * 100
	print('Class=%d, n=%d (%.3f%%)' % (k, v, per))

# plot the distribution
pyplot.bar(counter.keys(), counter.values())
pyplot.show()

